import random
import sys
import psycopg2
import openpyxl
import datetime
from PyQt5.QtGui import QPainter, QColor
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QApplication, QMainWindow, QTableWidgetItem, QGraphicsScene
from PyQt5.QtChart import QChart, QChartView, QBarSeries, QBarSet, QBarCategoryAxis, QValueAxis
from UIclass import main_window, LoginScreen, Add, delete, DeleteMessage, worker, add_worker, accountant, add_help, registry, add_client, graphics, queries
lastname = ('Петров', 'Кириллов', 'Емельянов', 'Попов', 'Зайцев', 'Александров', 'Климов', 'Крюков', 'Семенова', 'Мартынова', 'Киреева', 'Платонов', 'Лебедева', 'Иванова', 'Никифоров', 'Пирогова', 'Сергеев', 'Богомолова', 'Агеев', 'Суханова', 'Казакова', 'Иванов', 'Сорокина', 'Никифорова', 'Жуков', 'Соболев', 'Маркова', 'Сизова', 'Лукьянов', 'Голубева', 'Леонов', 'Авдеев', 'Кузьмин', 'Окулова', 'Латышев', 'Бычкова', 'Медведев', 'Королева', 'Васильева', 'Захарова', 'Сычева', 'Антонова', 'Беляева', 'Зайцева', 'Лыков', 'Яшина', 'Крылов', 'Мельникова', 'Грачева', 'Аксенова', 'Николаев', 'Леонова', 'Петрова', 'Рогова', 'Леонтьев', 'Токарева', 'Михеев', 'Алешина', 'Митрофанова', 'Панкратова', 'Гаврилов', 'Демидова', 'Спиридонов', 'Короткова', 'Шилов', 'Титова', 'Мартынов', 'Краснов', 'Васильев', 'Панов', 'Чернышева', 'Левина', 'Исаев', 'Гордеева', 'Колесов', 'Кудряшов', 'Федорова', 'Мешков', 'Князев', 'Игнатьев', 'Никонова', 'Филиппов', 'Козлова', 'Алексеева', 'Тарасова', 'Сафонов', 'Полякова', 'Громов', 'Баранова', 'Прокофьев', 'Яковлева', 'Андрианов', 'Седов', 'Глушков', 'Виноградов', 'Баранов', 'Дмитриев', 'Судакова', 'Соколов', 'Чеснокова', 'Алексеев', 'Орлова', 'Гончарова', 'Худякова', 'Фирсова', 'Захаров', 'Воробьева', 'Носов', 'Воронин', 'Степанова', 'Сидоров', 'Носова', 'Корнилова', 'Галкин', 'Хохлова', 'Макарова', 'Воронова', 'Наумов', 'Лопатин', 'Афанасьева', 'Богданов', 'Смирнов', 'Денисов', 'Данилов', 'Белова', 'Кузнецов', 'Куприянов', 'Жукова', 'Смирнова', 'Воронов', 'Горохов', 'Еремеева', 'Шаров', 'Михайлова', 'Самсонова', 'Белов', 'Тарасов', 'Сорокин', 'Маркин', 'Березина', 'Волкова', 'Кудрявцев', 'Пономарева', 'Гаврилова', 'Софронов', 'Мещеряков', 'Григорьева', 'Попова', 'Овсянников', 'Зверева', 'Фадеева', 'Воронцов', 'Козлов', 'Сотников', 'Яковлев', 'Черный', 'Быкова', 'Борисов', 'Парамонова', 'Фокина', 'Бородин', 'Романова', 'Матвеева', 'Матвеев', 'Родина', 'Вешнякова', 'Абрамов', 'Лосева', 'Алехина', 'Кузьмина', 'Устинова', 'Егорова', 'Соловьева', 'Лукьянова', 'Ильин', 'Чернышев', 'Львова', 'Королев', 'Белкин', 'Зорин', 'Ефимов', 'Орлов', 'Авдеева', 'Майоров', 'Зубкова', 'Хомяков', 'Симонова', 'Анисимов', 'Русаков', 'Ларина', 'Степанов', 'Никитин', 'Медведева', 'Щербаков', 'Бородина', 'Золотарев', 'Лаптев', 'Виноградова', 'Филиппова', 'Рябова', 'Павлова', 'Федоров', 'Сычев', 'Данилова', 'Архипова', 'Лебедев', 'Титов', 'Жарова', 'Громова', 'Селезнев', 'Миронова', 'Мухина', 'Дмитриева', 'Голикова', 'Андреев', 'Зимина', 'Панков', 'Куликов', 'Андреева', 'Уткин', 'Лобанов', 'Позднякова', 'Субботина', 'Минаева', 'Верещагина', 'Калинина', 'Молчанов', 'Абрамова', 'Агапов', 'Агапова', 'Агафонов', 'Агафонова', 'Агеева', 'Акимов', 'Акимова', 'Аксенов', 'Александрова', 'Алехин', 'Алешин', 'Ананьев', 'Ананьева', 'Андрианова', 'Аникин', 'Аникина', 'Анисимова', 'Анохин', 'Анохина', 'Антипов', 'Антипова', 'Антонов', 'Артамонов', 'Артамонова', 'Артемов', 'Артемова', 'Архипов', 'Астафьев', 'Астафьева', 'Астахова', 'Афанасьев', 'Бабушкина', 'Баженов', 'Баженова', 'Балашов', 'Балашова', 'Барсуков', 'Барсукова', 'Басов', 'Басова', 'Безруков', 'Безрукова', 'Беликов', 'Беликова', 'Белкина', 'Белоусов', 'Белоусова', 'Беляев', 'Беляков', 'Белякова', 'Березин', 'Беспалов', 'Беспалова', 'Бессонов', 'Бессонова', 'Бирюков', 'Бирюкова', 'Блинов', 'Блинова', 'Блохин', 'Блохина', 'Бобров', 'Боброва', 'Богданова', 'Богомолов', 'Болдырев', 'Болдырева', 'Большаков', 'Большакова', 'Бондарев', 'Бондарева', 'Борисова', 'Бочаров', 'Бочарова', 'Булатов', 'Булатова', 'Булгаков', 'Булгакова', 'Буров', 'Бурова', 'Быков', 'Бычков', 'Вавилов', 'Вавилова', 'Вдовин', 'Вдовина', 'Верещагин', 'Вешняков', 'Винокуров', 'Винокурова', 'Вишневская', 'Вишневский', 'Владимиров', 'Владимирова', 'Власов', 'Власова', 'Волков', 'Волошин', 'Волошина', 'Воробьев', 'Воронина', 'Воронков', 'Воронкова', 'Воронцова', 'Высоцкая', 'Высоцкий', 'Галкина', 'Герасимов', 'Герасимова', 'Гладков', 'Гладкова', 'Глебов', 'Глебова', 'Глухов', 'Глухова', 'Глушкова', 'Голованов', 'Голованова', 'Головин', 'Головина', 'Голубев', 'Гончаров', 'Горбачев', 'Горбачева', 'Горбунов', 'Горбунова', 'Гордеев', 'Горелов', 'Горелова', 'Горлов', 'Горлова', 'Горохова', 'Горшков', 'Горшкова', 'Горюнов', 'Горюнова', 'Горячев', 'Горячева', 'Грачев', 'Греков', 'Грекова', 'Грибов', 'Григорьев', 'Гришин', 'Гришина', 'Губанов', 'Губанова', 'Гуляев', 'Гуляева', 'Гуров', 'Гурова', 'Гусев', 'Гусева', 'Гущин', 'Гущина', 'Давыдов', 'Давыдова', 'Дегтярев', 'Дегтярева', 'Дементьев', 'Дементьева', 'Демидов', 'Демин', 'Демина', 'Демьянов', 'Демьянова', 'Денисова', 'Добрынин', 'Добрынина', 'Долгов', 'Долгова', 'Дорофеев', 'Дорофеева', 'Дорохов', 'Дорохова', 'Дроздов', 'Дроздова', 'Дружинин', 'Дружинина', 'Дубинин', 'Дубинина', 'Дубов', 'Дубова', 'Дубровин', 'Дубровина', 'Дьяков', 'Дьякова', 'Дьяконов', 'Дьяконова', 'Евдокимов', 'Евдокимова', 'Евсеев', 'Евсеева', 'Егоров', 'Ежов', 'Ежова', 'Елизаров', 'Елизарова', 'Елисеев', 'Елисеева', 'Емельянова', 'Еремеев', 'Еремин', 'Еремина', 'Ермаков', 'Ермакова', 'Ермилов', 'Ермилова', 'Ермолаев', 'Ермолаева', 'Ермолов', 'Ермолова', 'Ерофеев', 'Ерофеева', 'Ершов', 'Ершова', 'Ефимова', 'Ефремов', 'Ефремова', 'Жаров', 'Жданов', 'Жданова', 'Жилин', 'Жилина', 'Журавлев', 'Журавлева', 'Завьялов', 'Завьялова', 'Зверев', 'Звягинцев', 'Звягинцева', 'Зеленин', 'Зеленина', 'Зимин', 'Зиновьев', 'Зиновьева', 'Злобин', 'Злобина', 'Золотарева', 'Золотов', 'Золотова', 'Зорина', 'Зотов', 'Зотова', 'Зубков', 'Зубов', 'Зубова', 'Зуев', 'Зуева', 'Зыков', 'Зыкова', 'Игнатов', 'Игнатова', 'Игнатьева', 'Измайлова', 'Ильина', 'Ильинская', 'Ильинский', 'Исаева', 'Исаков', 'Исакова', 'Казаков', 'Казанцев', 'Казанцева', 'Калачев', 'Калачева', 'Калашников', 'Калашникова', 'Калинин', 'Калмыков', 'Калмыкова', 'Калугин', 'Калугина', 'Капустин', 'Капустина', 'Карпов', 'Карасев', 'Карасева', 'Карпова', 'Карташов', 'Касаткин', 'Касаткина', 'Касьянов', 'Касьянова', 'Киреев', 'Кириллова', 'Киселев', 'Киселева', 'Климова', 'Клюева', 'Князева', 'Ковалев', 'Ковалева', 'Кожевников', 'Кожевникова', 'Козин', 'Козина', 'Козловская', 'Козловский', 'Козырев', 'Козырева', 'Колесников', 'Колесникова', 'Колесова', 'Колосов', 'Колосова', 'Колпаков', 'Колпакова', 'Кольцов', 'Кольцова', 'Комаров', 'Комарова', 'Комиссаров', 'Комиссарова', 'Кондратов', 'Кондратова', 'Кондратьев', 'Кондратьева', 'Кондрашов', 'Кондрашова', 'Коновалов', 'Коновалова', 'Кононов', 'Кононова', 'Константинов', 'Константинова', 'Копылов', 'Копылова', 'Корнев', 'Корнева', 'Корнеев', 'Корнеева', 'Корнилов', 'Коровин', 'Коровина', 'Крюкова', 'Корольков', 'Королькова', 'Коротков', 'Корчагин', 'Корчагина', 'Коршунов', 'Коршунова', 'Косарев', 'Косарева', 'Костин', 'Костина', 'Котов', 'Котова', 'Кочергин', 'Кочергина', 'Кочетков', 'Кочеткова', 'Кочетов', 'Кочетова', 'Кошелев', 'Кошелева', 'Кравцов', 'Кравцова', 'Краснова', 'Круглов', 'Круглова', 'Крылова', 'Крючков', 'Крючкова', 'Кудрявцева', 'Кудряшова', 'Кузин', 'Кузина', 'Кузнецова', 'Кукушкина', 'Кулагин', 'Кулагина', 'Кулаков', 'Кулакова', 'Кулешов', 'Кулешова', 'Куликова', 'Куприянова', 'Курочкин', 'Курочкина', 'Лаврентьев', 'Лаврентьева', 'Лавров', 'Лаврова', 'Лазарев', 'Лазарева', 'Лапин', 'Лапина', 'Лаптева', 'Лапшин', 'Лапшина', 'Ларин', 'Ларионов', 'Ларионова', 'Латышева', 'Левин', 'Леонтьева', 'Литвинов', 'Литвинова', 'Лобанова', 'Логинов', 'Логинова', 'Лопатина', 'Лосев', 'Лукин', 'Лукина', 'Львов', 'Любимов', 'Любимова', 'Майорова', 'Макаров', 'Макеев', 'Макеева', 'Максимов', 'Максимова', 'Малахов', 'Малахова', 'Малинин', 'Малинина', 'Малышев', 'Малышева', 'Мальцев', 'Мальцева', 'Маркелов', 'Маркелова', 'Маркина', 'Марков', 'Масленников', 'Масленникова', 'Маслов', 'Маслова', 'Мельников', 'Меркулов', 'Меркулова', 'Мешкова', 'Мещерякова', 'Минаев', 'Минина', 'Миронов', 'Мухин', 'Митрофанов', 'Михайлов', 'Михеева', 'Моисеев', 'Моисеева', 'Молчанова', 'Моргунов', 'Моргунова', 'Морозов', 'Морозова', 'Москвин', 'Москвина', 'Муравьев', 'Муравьева', 'Муратов', 'Муратова', 'Назаров', 'Назарова', 'Наумова', 'Некрасов', 'Некрасова', 'Нестеров', 'Нестерова', 'Нефедов', 'Нефедова', 'Нечаев', 'Нечаева', 'Никитина', 'Николаева', 'Никольская', 'Никольский', 'Никонов', 'Новиков', 'Никулин', 'Никулина', 'Новикова', 'Носкова', 'Овсянникова', 'Овчинников', 'Овчинникова', 'Одинцов', 'Одинцова', 'Озеров', 'Озерова', 'Окулов', 'Олейников', 'Олейникова', 'Орехов', 'Орехова', 'Осипов', 'Осипова', 'Островская', 'Островский', 'Павлов', 'Павловская', 'Павловский', 'Панин', 'Панина', 'Панкова', 'Панкратов', 'Панова', 'Пантелеев', 'Пантелеева', 'Панфилов', 'Панфилова', 'Парамонов', 'Парфенов', 'Парфенова', 'Пастухов', 'Пастухова', 'Пахомов', 'Пахомова', 'Петровская', 'Петровский', 'Петухов', 'Петухова', 'Пименов', 'Пименова', 'Пирогов', 'Платонова', 'Плотников', 'Плотникова', 'Поздняков', 'Покровская', 'Покровский', 'Поликарпов', 'Поликарпова', 'Поляков', 'Пономарев', 'Постников', 'Постникова', 'Потапов', 'Потапова', 'Прокофьева', 'Прохоров', 'Прохорова', 'Пугачев', 'Пугачева', 'Раков', 'Ракова', 'Рогов', 'Родионов', 'Родионова', 'Рожков', 'Рожкова', 'Розанов', 'Розанова', 'Романов', 'Рубцов', 'Рубцова', 'Рудаков', 'Рудакова', 'Руднев', 'Руднева', 'Румянцев', 'Румянцева', 'Русакова', 'Русанов', 'Русанова', 'Рыбаков', 'Рыбакова', 'Рыжов', 'Рыжова', 'Рябинин', 'Рябов', 'Савельев', 'Савельева', 'Савин', 'Савина', 'Савицкая', 'Савицкий', 'Сазонов', 'Сазонова', 'Сальников', 'Самойлов', 'Самойлова', 'Самсонов', 'Сафонова', 'Сахаров', 'Сахарова', 'Свешников', 'Свешникова', 'Свиридов', 'Свиридова', 'Севастьянов', 'Севастьянова', 'Седова', 'Селезнева', 'Селиванов', 'Селиванова', 'Семенов', 'Семин', 'Семина', 'Сергеева', 'Серебряков', 'Серебрякова', 'Серов', 'Серова', 'Сидорова', 'Сизов', 'Симонов', 'Синицын', 'Синицына', 'Ситников', 'Ситникова', 'Скворцов', 'Скворцова', 'Снегирев', 'Снегирева', 'Соболева', 'Соколова', 'Соловьев', 'Сомов', 'Сомова', 'Сотникова', 'Софронова', 'Спиридонова', 'Стариков', 'Старикова', 'Старостин', 'Старостина', 'Столяров', 'Столярова', 'Субботин', 'Суворов', 'Суворова', 'Судаков', 'Сурков', 'Суслов', 'Суслова', 'Суханов', 'Сухарев', 'Сухарева', 'Сухов', 'Сухова', 'Терентьев', 'Терентьева', 'Терехов', 'Терехова', 'Тимофеев', 'Тимофеева', 'Тихомиров', 'Тихомирова', 'Тихонов', 'Ушаков', 'Тихонова', 'Ткачев', 'Ткачева', 'Токарев', 'Толкачев', 'Толкачева', 'Третьяков', 'Третьякова', 'Трифонов', 'Трифонова', 'Троицкая', 'Троицкий', 'Трофимов', 'Трофимова', 'Трошин', 'Трошина', 'Туманова', 'Уваров', 'Ульянов', 'Ульянова', 'Усов', 'Усова', 'Успенская', 'Успенский', 'Устинов', 'Уткина', 'Ушакова', 'Фадеев', 'Федосеев', 'Федосеева', 'Федосов', 'Федотов', 'Федотова', 'Фетисов', 'Фетисова', 'Филатов', 'Филатова', 'Филимонов', 'Филимонова', 'Фирсов', 'Фокин', 'Фомин', 'Фомина', 'Фомичев', 'Фомичева', 'Фролов', 'Фролова', 'Харитонов', 'Харитонова', 'Хомякова', 'Хохлов', 'Хромов', 'Хромова', 'Худяков', 'Царев', 'Царева', 'Цветков', 'Цветкова', 'Черная', 'Чеботарев', 'Чеботарева', 'Черепанов', 'Черепанова', 'Черкасов', 'Черкасова', 'Чернов', 'Чернова', 'Черных', 'Черныха', 'Черняев', 'Черняева', 'Чесноков', 'Чижов', 'Чистяков', 'Чистякова', 'Горняков')

firstname = ('Герман', 'Виктор', 'Дмитрий', 'Павел', 'Степан', 'Алексей', 'Тихон', 'Даниил', 'Полина', 'Ева', 'Елизавета', 'Илья', 'Евгения', 'Дарья', 'София', 'Андрей', 'Александр', 'Софья', 'Макар', 'Вячеслав', 'Серафима', 'Анастасия', 'Егор', 'Ярослав', 'Василиса', 'Артём', 'Лея', 'Назар', 'Виктория', 'Мадина', 'Максим', 'Ульяна', 'Алиса', 'Александра', 'Варвара', 'Ариана', 'Иван', 'Игорь', 'Татьяна', 'Марианна', 'Анна', 'Альбина', 'Богдан', 'Константин', 'Нина', 'Кирилл', 'Владислав', 'Маргарита', 'Екатерина', 'Святослав', 'Арина', 'Роман', 'Никита', 'Михаил', 'Мирон', 'Тимофей', 'Мария', 'Юлия', 'Фёдор', 'Николай', 'Мирослав', 'Лидия', 'Ирина', 'Руслан', 'Милана', 'Григорий', 'Марк', 'Алёна', 'Вероника', 'Станислав', 'Матвей', 'Мила', 'Вадим', 'Валерия', 'Ангелина', 'Вера', 'Владимир', 'Арсений', 'Адам', 'Юрий', 'Лев', 'Ольга', 'Марина', 'Таисия', 'Мирослава', 'Агата', 'Мира', 'Соня', 'Антон', 'Семён', 'Денис', 'Георгий', 'Амелия', 'Елена', 'Леон', 'Леонид', 'Эмма', 'Стефания', 'Ксения', 'Есения', 'Марьяна', 'Елисей', 'Сергей', 'Оливия', 'Асия', 'Зоя', 'Глеб', 'Фатима', 'Алисия', 'Давид', 'Марьям', 'Сафия', 'Амина', 'Аглая', 'Артур', 'Лука', 'Евгений', 'Савва', 'Ника', 'Кира', 'Антонина', 'Яна', 'Карина', 'Олег', 'Артемий', 'Демид', 'Платон', 'Борис', 'Дарина', 'Злата', 'Милена', 'Тимур', 'Пётр', 'Серафим', 'Олеся', 'Кристина', 'Алина', 'Всеволод', 'Роберт', 'Мия', 'Любовь', 'Филипп', 'Светлана', 'Валерий', 'Захар', 'Надежда', 'Ян', 'Гордей', 'Ярослава', 'Владислава', 'Диана', 'Валентина', 'Майя', 'Анатолий', 'Родион', 'Савелий', 'Лилия', 'Василий', 'Демьян', 'Наталья', 'Яков', 'Марат')

second_name = ('Александрович', 'Артёмовна', 'Александрович', 'Макаровна', 'Степановна', 'Никитич', 'Александрович', 'Сергеевич', 'Максимович', 'Никитична', 'Степанович', 'Артемьевич', 'Артёмовна', 'Макаровна', 'Тимофеевна', 'Никитич', 'Михайлович', 'Фёдоровна', 'Тимурович', 'Маркович', 'Гордеевич', 'Данииловна', 'Дмитриевич', 'Алексеевна', 'Артёмович', 'Максимович', 'Александровна', 'Кириллович', 'Арсентьевна', 'Александрович', 'Артёмовна', 'Константиновна', 'Денисовна', 'Александрович', 'Сергеевна', 'Романовна', 'Марковна', 'Робертович', 'Артемьевич', 'Георгиевна', 'Ивановна', 'Владиславовна', 'Александрович', 'Давидовна', 'Максимович', 'Михайловна', 'Максимович', 'Алексеевна', 'Дмитриевич', 'Никитич', 'Алексеевна', 'Романович', 'Саввична', 'Дмитриевич', 'Артуровна', 'Михайловна', 'Елисеевич', 'Семёнович', 'Артёмович', 'Демидович', 'Степанович', 'Степанович', 'Кириллович', 'Иванович', 'Кирилловна', 'Захаровна', 'Даниилович', 'Георгиевич', 'Никитич', 'Ильинична', 'Гордеевич', 'Ярославович', 'Даниилович', 'Семёновна', 'Дмитриевна', 'Германович', 'Дмитриевна', 'Сергеевич', 'Германовна', 'Маркович', 'Дмитриевич', 'Макарович', 'Богдановна', 'Фёдоровна', 'Артемьевич', 'Тимуровна', 'Максимовна', 'Андреевна', 'Артёмович', 'Константинович', 'Артуровна', 'Матвеевна', 'Никитич', 'Максимович', 'Александровна', 'Максимович', 'Мироновна', 'Артёмович', 'Артёмович', 'Эминович')

book_name = ('Столица', 'Самолет', 'Инженер', 'Карта', 'Экран', 'Море', 'Собрание', 'Километр', 'Район', 'Удовольствие', 'Вещь', 'Представление', 'Поселок', 'Пора', 'След', 'Недостаток', 'Радость', 'Ветер', 'Платье', 'Известие', 'Увеличение', 'Будущее', 'Крыло', 'Урок', 'Сюжет', 'Система', 'Особенность', 'Использование', 'Доклад', 'Детство', 'Ракета', 'Политика', 'Комплекс', 'Покупатель', 'Суд', 'Категория', 'Предмет', 'Начальник', 'Акт', 'Связь', 'Структура', 'Сравнение', 'Земля', 'Возвращение', 'Тетя', 'Год', 'Командир', 'Ключ', 'Версия', 'Воспитание', 'Остаток', 'Талант', 'Жена', 'Частность', 'Бизнес', 'Количество', 'Кулак', 'Пенсия', 'Сцена', 'Отдел', 'Станция', 'Польза', 'Позиция', 'Профессор', 'Помощь', 'Лист', 'Глубина', 'Коммунист', 'Ответственность', 'Рынок', 'Имущество', 'Адрес', 'Ноябрь', 'Требование', 'Губа', 'Правительство', 'Ночь', 'Круг', 'Реформа', 'Дом', 'Еврей', 'Фраза', 'Удивление', 'Лагерь', 'Группа', 'Плечо', 'Фонд', 'Знание', 'Водитель', 'Выражение', 'Товар', 'Женщина', 'Число', 'Время', 'Интерес', 'Зависимость', 'Рассказ', 'Признание', 'Человек', 'True', 'Депутат', 'Доля', 'Результат', 'Тело', 'Зал', 'Мастер', 'Рассмотрение', 'Объединение', 'Враг', 'Свет', 'Желание', 'Победа', 'Мужик', 'Спорт', 'Обучение', 'Состояние', 'Теория', 'Еда', 'Союз', 'Публика', 'Лошадь', 'Этаж', 'Помещение', 'Кредит', 'Искусство', 'Течение', 'Страсть', 'Музей', 'Механизм', 'Практика', 'Контроль', 'Округ', 'Предприятие', 'Хвост', 'Часть', 'Уход', 'Переговоры', 'База', 'Мальчишка', 'Сущность', 'Нога', 'Соответствие', 'Рыба', 'Формула', 'Назначение', 'Записка', 'Показатель', 'Влияние', 'Качество', 'Друг', 'Психология', 'Совет', 'Стекло', 'Тишина', 'Ужас', 'Секретарь', 'Причина', 'Ход', 'Порядок', 'Человечество', 'Риск', 'Фигура', 'Правило', 'Соглашение', 'Строка', 'Работа', 'Цель', 'Поколение', 'Мешок', 'Сумма', 'Комната', 'Храм', 'Проблема', 'Дождь', 'Акция', 'Почва', 'Реакция', 'Этап', 'Картина', 'Перспектива', 'Ситуация', 'Дерево', 'Организация', 'Месяц', 'Передача', 'Поверхность', 'Миллион', 'Рождение', 'Восторг', 'Мгновение', 'Врач', 'Руководитель', 'Десяток', 'Письмо', 'Поле', 'Основание', 'Крик', 'Лето', 'Праздник', 'Занятие', 'Параметр', 'Дух', 'Замок', 'Режиссер', 'Середина', 'Черт', 'Класс', 'Оценка', 'Ценность', 'Декабрь', 'Угроза', 'Действие', 'Господин', 'Отказ', 'Список', 'Молодежь', 'Редактор', 'Зритель', 'Доллар', 'Мнение', 'Дурак', 'Территория', 'Сведение', 'Масса', 'Соединение', 'Очередь', 'Печать', 'Энергия', 'Состав', 'Вирус', 'Шум', 'Ум', 'Страна', 'Сумка', 'Артист', 'Тайна', 'Значение', 'Способ', 'Рисунок', 'Живот', 'Средство', 'Спина', 'День', 'Сын', 'Блок', 'Традиция', 'Тюрьма', 'Ресурс', 'Хлеб', 'Половина', 'Препарат', 'Защита', 'Поездка', 'Институт', 'Открытие', 'Помощник', 'Жизнь', 'Тысяча', 'Формирование', 'Выход', 'Мост', 'Бумага', 'Сосед', 'Вариант', 'Книга', 'Следователь', 'Тень', 'Зуб', 'Шутка', 'Регион', 'Милиция', 'Наличие', 'Промышленность', 'Охрана', 'Отношение', 'Характеристика', 'Старик', 'Издание', 'Предложение', 'Страница', 'Гора', 'Ребенок', 'Газ', 'Сотрудничество', 'Культура', 'Плата', 'Спектакль', 'Запись', 'Счет', 'Личность', 'Глаз', 'Вход', 'Реальность', 'Солдат', 'Звезда', 'Создание', 'Январь', 'Прием', 'Статус', 'Право', 'Кризис', 'Документ', 'Народ', 'Молоко', 'Отсутствие', 'Участок', 'Подруга', 'Стихи', 'Рубль', 'Сторона', 'Коллектив', 'Государство', 'Дед', 'Семья', 'Республика', 'Канал', 'Лед', 'Беда', 'Поезд', 'Торговля', 'Деньги', 'Разработка', 'Фильм', 'Ставка', 'Запах', 'Выставка', 'Кресло', 'Папа', 'Ресторан', 'Характер', 'Удар', 'Подразделение', 'Бог', 'Темнота', 'Запас', 'Дверь', 'Фамилия', 'Ладонь', 'Размер', 'Норма', 'Перевод', 'Бой', 'Лоб', 'Металл', 'Специалист', 'Минута', 'Субъект', 'Принятие', 'Песок', 'Снижение', 'Выбор', 'Выпуск', 'Пол', 'Природа', 'Изменение', 'Водка', 'Форма', 'Министр', 'Направление', 'Запад', 'Вода', 'Убийство', 'Король', 'Сотрудник', 'Литература', 'Театр', 'Конференция', 'Описание', 'Текст', 'Организм', 'Эпоха', 'Пример', 'Способность', 'Февраль', 'Процент', 'Полковник', 'Автор', 'Температура', 'История', 'Утро', 'Окно', 'Игра', 'Таблица', 'Мать', 'Чай', 'Поток', 'Художник', 'Вечер', 'Ответ', 'Хозяйство', 'Завод', 'Элемент', 'План', 'Дружба', 'Вкус', 'Деревня', 'Больной', 'Статья', 'Чтение', 'Знакомый', 'Эффект', 'Вопрос', 'Зло', 'Директор', 'Дно', 'Машина', 'Масло', 'Магазин', 'Золото', 'Гражданин', 'Номер', 'Свобода', 'Мера', 'Корень', 'Пистолет', 'Зарплата', 'Рамка', 'Американец', 'Здоровье', 'Ошибка', 'Нарушение', 'Договор', 'Объем', 'Борьба', 'Труд', 'Необходимость', 'Цифра', 'Капитан', 'Председатель', 'Деталь', 'Наука', 'Общение', 'Добро', 'Штат', 'Данные', 'Столик', 'Ящик', 'Дача', 'Поддержка', 'Брат', 'Царь', 'Смена', 'Наблюдение', 'Множество', 'Эффективность', 'Уровень', 'Содержание', 'Процесс', 'Лидер', 'Мясо', 'Впечатление', 'Дыхание', 'Цвет', 'Вагон', 'Набор', 'Сила', 'Доказательство', 'Банк', 'Существование', 'Новость', 'Пиво', 'Судьба', 'Мир', 'Название', 'Скорость', 'Последствие', 'Боль', 'Момент', 'Порог', 'Старуха', 'Степень', 'Безопасность', 'Модель', 'Сестра', 'Воспоминание', 'Материал', 'Вид', 'Сказка', 'Растение', 'Присутствие', 'Огонь', 'Хозяйка', 'Стиль', 'Вино', 'Щека', 'Болезнь', 'Мощность', 'Звук', 'Законодательство', 'Кофе', 'Миг', 'Беседа', 'Колено', 'Конструкция', 'Буква', 'Слава', 'Толпа', 'Муж', 'Настроение', 'Повод', 'Попытка', 'Эксплуатация', 'Глава', 'Комиссия', 'Пространство', 'Окончание', 'Оборона', 'Площадь', 'Федерация', 'Брак', 'Доход', 'Творчество', 'Указание', 'Автобус', 'Кадр', 'Продажа', 'Лодка', 'Март')

dist = ('Молочный', 'Безопасный', 'Значительный', 'Рабочий', 'Целесообразный', 'Квадратный', 'Искренний', 'Армейский', 'Некоторые', 'Душевный', 'Избирательный', 'Районный', 'Ленинградский', 'Женатый', 'Согласный', 'Сомнительный', 'Студенческий', 'Положенный', 'Земной', 'Главный', 'Любопытный', 'Тревожный', 'Молодежный', 'Олимпийский', 'Голодный', 'Молочный', 'Бедный', 'Исключительный', 'Всеобщий', 'Гордый', 'Интенсивный', 'Районный', 'Благополучный', 'Одетый', 'Жидкий', 'Чистый', 'Заметный', 'Заметный', 'Октябрьский', 'Рабочий', 'Последовательный', 'Серьезный', 'Законный', 'Древний', 'Украинский', 'Механический', 'Силовой', 'Оптимальный', 'Здоровый', 'Подземный', 'Сумасшедший', 'Громкий', 'Математический', 'Дополнительный', 'Избирательный', 'Художественный', 'Настоящий', 'Начальный', 'Одинокий', 'Нормативный', 'Законный', 'Аналогичный', 'Крестьянский', 'Гуманитарный', 'Неправильный', 'Серьезный', 'Горный', 'Налоговый', 'Желающий', 'Младший', 'Промышленный', 'Безопасный', 'Жестокий', 'Ракетный', 'Немой', 'Младший', 'Официальный', 'Служащий', 'Властный', 'Всероссийский', 'Относительный', 'Неясный', 'Невыносимый', 'Советский', 'Яркий', 'Функциональный', 'Больной', 'Общественный', 'Разноцветный', 'Актуальный', 'Лишний', 'Должен', 'Кремлевский', 'Роковой', 'Наивный', 'Подходящий', 'Непривычный', 'Шахматный', 'Проклятый', 'Дурной', 'Стальной', 'Вкусный', 'Финский', 'Казенный', 'Медленный', 'Израильский', 'Любимый', 'Татарский', 'Моральный', 'Химический', 'Скрытый', 'Регулярный', 'Заслуженный', 'Честный', 'Достаточный', 'Дальнейший', 'Должен', 'Мирный', 'Подземный', 'Круглый', 'Трудный', 'Прогрессивный', 'Пограничный', 'Уличный', 'Культурный', 'Критический', 'Финский', 'Отличный', 'Активный', 'Химический', 'Христов', 'Целый', 'Трудный', 'Жизненный', 'Тяжкий', 'Функциональный', 'Санитарный', 'Парламентский', 'Грандиозный', 'Исполнительный', 'Немалый', 'Абстрактный', 'Колоссальный', 'Санитарный', 'Проклятый', 'Желтый', 'Жалкий', 'Качественный', 'Практический', 'Рядовой', 'Гуманитарный', 'Левый', 'Часовой', 'Коллективный', 'Передовой', 'Солнечный', 'Живой', 'Кожаный', 'Маленький', 'Процентный', 'Напряженный', 'Странный', 'Должный', 'Непонятный', 'Пожилой', 'Влюбленный', 'Школьный', 'Короткий', 'Статистический', 'Нелепый', 'Удивительный', 'Клинический', 'Геологический', 'Жирный', 'Командный', 'Настоящий', 'Гордый', 'Волшебный', 'Загадочный', 'Современный', 'Просторный', 'Разнообразный', 'Вероятный', 'Музыкальный', 'Молчаливый', 'Коммунистический', 'Уважаемый', 'Системный', 'Честный', 'Индийский', 'Стальной', 'Уральский', 'Дорогой', 'Вооруженный', 'Дикий', 'Сердечный', 'Растительный', 'Заключенный', 'Особый', 'Убежденный', 'Пустой', 'Тюремный', 'Возрастной', 'Рабочий', 'Аналитический', 'Бетонный', 'Верховный', 'Искренний', 'Инвестиционный', 'Функциональный', 'Воинский', 'Педагогический', 'Ровный', 'Неверный', 'Невозможный', 'Низкий', 'Фактический', 'Свойственный', 'Президентский', 'Советский', 'Вечерний', 'Удивленный', 'Управляющий', 'Лекарственный', 'Приличный', 'Очевидный', 'Незаконный', 'Своеобразный', 'Смертельный', 'Мягкий', 'Золотой', 'Грустный', 'Конституционный', 'Роскошный', 'Буржуазный', 'Конкретный', 'Специфический', 'Рациональный', 'Меньший', 'Гибкий', 'Тяжкий', 'Натуральный', 'Хозяйственный', 'Заметный', 'Кавказский', 'Немалый', 'Административный', 'Германский', 'Собачий', 'Случайный', 'Плохой', 'Отрицательный', 'Замечательный', 'Голубой', 'Открытый', 'Информационный', 'Ограниченный', 'Жестокий', 'Ленинский', 'Синий', 'Способный', 'Тепловой', 'Проклятый', 'Силовой', 'Биологический', 'Боевой', 'Ядерный', 'Молчаливый', 'Поперечный', 'Древний', 'Пенсионный', 'Железный', 'Классический', 'Современный', 'Психологический', 'Глупый', 'Методический', 'Вирусный', 'Хрупкий', 'Питерский', 'Национальный', 'Семейный', 'Основной', 'Южный', 'Мощный', 'Гуманитарный', 'Полноценный', 'Неизбежный', 'Исполнительный', 'Привычный', 'Христианский', 'Достойный', 'Хрупкий', 'Уполномоченный', 'Кровавый', 'Местный', 'Цивилизованный', 'Локальный', 'Потребительский', 'Золотой', 'Царский', 'Спокойный', 'Радостный', 'Конституционный', 'Очевидный', 'Киевский', 'Взаимный', 'Газетный', 'Прекрасный', 'Весенний', 'Нефтяной', 'Вольный', 'Конструктивный', 'Почетный', 'Жалкий', 'Ужасный', 'Далекий', 'Нормативный', 'Престижный', 'Грузовой', 'Царский', 'Серебряный', 'Развитый', 'Творческий', 'Обширный', 'Аналогичный', 'Незнакомый', 'Невыносимый', 'Земельный', 'Эмоциональный', 'Принципиальный', 'Ближний', 'Парижский', 'Мучительный', 'Справедливый', 'Нежный', 'Огромный', 'Одинаковый', 'Розовый', 'Выходной', 'Истинный', 'Милый', 'Предвыборный', 'Металлургический', 'Стеклянный', 'Печатный', 'Отечественный', 'Уголовный', 'Равный', 'Всевозможный', 'Далекий', 'Привычный', 'Драматический', 'Намерен', 'Многий', 'Недостаточный', 'Значимый', 'Окружающий', 'Нижний', 'Характерный', 'Нефтяной', 'Капитальный', 'Неизвестный', 'Определенный', 'Солидный', 'Ведущий', 'Революционный', 'Мертвый', 'Ценный', 'Теплый', 'Кавказский', 'Острый', 'Должный', 'Ровный', 'Романтический', 'Возрастной', 'Многий', 'Текущий', 'Красивый', 'Невысокий', 'Типичный', 'Органический', 'Одетый', 'Пенсионный', 'Надежный', 'Немыслимый', 'Транспортный', 'Ядерный', 'Проклятый', 'Вчерашний', 'Спортивный', 'Полноценный', 'Самарский', 'Магнитный', 'Солдатский', 'Прочий', 'Абстрактный', 'Громкий', 'Коммунистический', 'Прекрасный', 'Здешний', 'Польский', 'Самарский', 'Домашний', 'Смешанный', 'Живой', 'Минеральный', 'Редкий', 'Одетый', 'Деловой', 'Точный', 'Лысый', 'Мировой', 'Медленный', 'Душевный', 'Аналитический', 'Германский', 'Коренной', 'Святой', 'Повышенный', 'Недостаточный', 'Неудачный', 'Психологический', 'Будущий', 'Финансовый', 'Дальнейший', 'Достойный', 'Добрый', 'Функциональный', 'Китайский', 'Порядочный', 'Социалистический', 'Необычный', 'Энергичный', 'Солнечный', 'Крупный', 'Европейский', 'Откровенный', 'Поразительный', 'Каменный', 'Системный', 'Правовой', 'Немалый', 'Процентный', 'Строительный', 'Академический', 'Благородный', 'Замкнутый', 'Обыкновенный', 'Дальнейший', 'Цивилизованный', 'Территориальный', 'Домашний', 'Металлургический', 'Человеческий', 'Порядочный', 'Военный', 'Экологический', 'Наивный', 'Идеологический', 'Судебный', 'Странный', 'Организационный', 'Нищий', 'Силовой', 'Комсомольский', 'Нормативный', 'Вредный', 'Медленный', 'Исторический', 'Добровольный', 'Незаконный', 'Верховный', 'Скромный', 'Удобный', 'Шумный', 'Оранжевый', 'Материальный', 'Совершенный', 'Веселый', 'Клинический', 'Шумный', 'Противный', 'Печатный', 'Огромный', 'Разнообразный', 'Действующий', 'Усталый', 'Единственный', 'Известный', 'Геологический', 'Банковский', 'Правительственный', 'Математический', 'Формальный', 'Сильный', 'Давний', 'Пограничный', 'Парламентский', 'Кривой', 'Русский', 'Срочный', 'Половый', 'Тактический', 'Бурный', 'Двойной', 'Искусственный', 'Средневековый', 'Сомнительный', 'Научно-Технический', 'Автоматический', 'Далекий', 'Тревожный', 'Приятный', 'Надежный', 'Низкий', 'Случайный', 'Серый', 'Передовой', 'Соответствующий', 'Общественный', 'Тревожный', 'Ответный', 'Абсолютный', 'Бумажный', 'Непосредственный', 'Одетый', 'Хороший', 'Бетонный', 'Очередной', 'Революционный', 'Торговый', 'Массовый', 'Крайний', 'Значимый', 'Соседний', 'Символический', 'Бессмысленный', 'Стабильный', 'Молочный', 'Влюбленный', 'Товарный', 'Минеральный', 'Предварительный', 'Шахматный', 'Суровый', 'Спокойный', 'Нехороший', 'Женатый', 'Ведущий', 'Финский', 'Вероятный', 'Элементарный', 'Ровный', 'Намерен', 'Славный', 'Частый', 'Казенный', 'Достойный', 'Временной', 'Химический', 'Видный', 'Погибший', 'Этнический', 'Жаркий', 'Рыжий', 'Ключевой', 'Фактический', 'Металлургический', 'Мужской', 'Удивленный', 'Магнитный', 'Организованный', 'Далекий', 'Арбитражный', 'Достаточный', 'Интеллектуальный', 'Гордый', 'Лекарственный', 'Бытовой', 'Минувший', 'Значимый', 'Трагический', 'Радостный', 'Любопытный', 'Радостный', 'Сталинский', 'Отвратительный', 'Жестокий', 'Видный', 'Кровавый', 'Годовой', 'Преподобный', 'Вероятный', 'Коммунистический', 'Старательный', 'Утренний', 'Местный', 'Отдельный', 'Логический', 'Финансовый', 'Соответствующий', 'Лекарственный', 'Удивленный', 'Медленный', 'Всероссийский', 'Должен', 'Потенциальный', 'Студенческий', 'Невидимый', 'Ежегодный', 'Собачий', 'Умный', 'Всякий', 'Блестящий', 'Голубой', 'Боевой', 'Самарский', 'Спортивный', 'Дружеский', 'Зимний', 'Совершенный', 'Прозрачный', 'Розовый', 'Профессиональный', 'Непрерывный', 'Недовольный', 'Ужасный', 'Ученый', 'Талантливый', 'Восточный', 'Покойный', 'Давний', 'Региональный', 'Обратный', 'Таинственный', 'Решающий', 'Вчерашний', 'Ненужный', 'Личной', 'Главный', 'Нравственный', 'Грядущий', 'Криминальный', 'Богатый', 'Молчаливый', 'Многий', 'Верный', 'Уверенный', 'Северный', 'Ударный', 'Страшный', 'Священный', 'Неизбежный', 'Зимний', 'Кадровый', 'Образованный', 'Звездный', 'Великий', 'Полезный', 'Благодарный', 'Холодный', 'Невысокий', 'Стальной', 'Живой', 'Следственный', 'Кадровый', 'Символический', 'Столичный', 'Химический', 'Минеральный', 'Отчаянный', 'Альтернативный', 'Муниципальный', 'Объективный', 'Данный', 'Эмоциональный', 'Исходный', 'Дорожный', 'Этнический', 'Нервный', 'Обязанный', 'Прошедший', 'Кожаный', 'Турецкий', 'Финский', 'Любой', 'Ласковый', 'Положительный', 'Жилищный', 'Новогодний', 'Областной', 'Экспериментальный', 'Кадровый', 'Заключенный', 'Честный', 'Сухой', 'Субъективный', 'Военный', 'Узкий', 'Еврейский', 'Верховный', 'Приличный', 'Финский', 'Санитарный', 'Божественный', 'Торжественный', 'Криминальный', 'Персональный', 'Широкий', 'Заключенный', 'Избирательный', 'Пожарный', 'Акционерный', 'Казенный', 'Невыносимый', 'Многочисленный', 'Сегодняшний', 'Спортивный', 'Крутой', 'Правительственный', 'Таинственный', 'Массовый', 'Заслуженный', 'Будущий', 'Минимальный', 'Глубокий', 'Честный', 'Аккуратный', 'Многолетний', 'Универсальный', 'Влажный', 'Объективный', 'Боевой', 'Плоский', 'Входной', 'Предыдущий', 'Литературный', 'Солдатский', 'Тактический', 'Истинный', 'Мобильный', 'Позитивный', 'Населенный', 'Учебный', 'Смешанный', 'Святой', 'Примитивный', 'Повседневный', 'Некоторые', 'Образованный', 'Экспертный', 'Развитый', 'Вчерашний', 'Грузовой', 'Сплошной', 'Этнический', 'Структурный', 'Родной', 'Интеллектуальный', 'Прогрессивный', 'Формальный', 'Трогательный', 'Провинциальный', 'Умерший', 'Обширный', 'Церковный', 'Польский', 'Плохой', 'Арбитражный', 'Невозможный', 'Городской', 'Близкий', 'Важный', 'Окружающий', 'Невидимый', 'Водный', 'Крошечный', 'Немой', 'Неверный', 'Нравственный', 'Слепой', 'Минеральный', 'Зенитный', 'Зеленый', 'Водный', 'Рекламный', 'Дежурный', 'Христов', 'Далекий', 'Деревенский', 'Отчаянный', 'Искусственный', 'Намерен', 'Служебный', 'Основной', 'Милый', 'Поверхностный', 'Теплый', 'Основной', 'Огромный', 'Грамотный', 'Видный', 'Возможный', 'Низкий', 'Автономный', 'Синий', 'Встречный', 'Творческий', 'Оперативный', 'Сельский', 'Правоохранительный', 'Классный', 'Населенный', 'Блаженный', 'Элементарный', 'Футбольный', 'Прямой', 'Ежегодный', 'Проклятый', 'Социалистический', 'Людской', 'Почтовый', 'Ударный', 'Мясной', 'Законный', 'Геологический', 'Огромный', 'Немецкий', 'Пограничный', 'Прежний', 'Лекарственный', 'Решающий', 'Декоративный', 'Личной', 'Маленький', 'Нормальный', 'Единственный', 'Скрытый', 'Советский', 'Былой', 'Финский', 'Христов', 'Символический', 'Тюремный', 'Любопытный', 'Многолетний', 'Исполнительный', 'Социологический', 'Экспертный', 'Положенный', 'Зеленый', 'Занятый', 'Недовольный', 'Конституционный', 'Сладкий', 'Сильный', 'Уверенный', 'Личный', 'Удивительный', 'Чудесный', 'Честной', 'Восточный', 'Восточный', 'Должностной', 'Легендарный', 'Физический', 'Программный', 'Строгий', 'Актерский', 'Мировой', 'Немой')

prop = ('Кавказский', 'Левый', 'Настоящий', 'Дружеский', 'Озабоченный', 'Пермский', 'Рациональный', 'Неудачный', 'Дальний', 'Интеллигентный', 'Благополучный', 'Сегодняшний', 'Уважаемый', 'Красивый', 'Негативный', 'Вкусный', 'Авторский', 'Огненный', 'Подходящий', 'Прошедший', 'Тяжелый', 'Некоторые', 'Пищевой', 'Очевидный', 'Частый', 'Загадочный', 'Гигантский', 'Страховой', 'Преподобный', 'Образованный', 'Заинтересованный', 'Пустой', 'Ориентированный', 'Новогодний', 'Адекватный', 'Старший', 'Торговый', 'Русский', 'Двойной', 'Пустой', 'Громкий', 'Цветной', 'Тепловой', 'Условный', 'Пестрый', 'Семейный', 'Бюджетный', 'Кровавый', 'Похожий', 'Приличный', 'Умерший', 'Низкий', 'Отличный', 'Близкий', 'Колоссальный', 'Снежный', 'Обыкновенный', 'Недавний', 'Научно-Технический', 'Нищий', 'Принятый', 'Торговый', 'Строгий', 'Богатый', 'Военный', 'Самостоятельный', 'Цветной', 'Общий', 'Современный', 'Итальянский', 'Уполномоченный', 'Задний', 'Алый', 'Налоговый', 'Духовный', 'Острый', 'Иной', 'Всеобщий', 'Чрезвычайный', 'Неведомый', 'Инженерный', 'Гигантский', 'Массовый', 'Дорогой', 'Инвестиционный', 'Частый', 'Отрицательный', 'Влажный', 'Двойной', 'Жуткий', 'Молочный', 'Готовый', 'Защитный', 'Самарский', 'Короткий', 'Публичный', 'Традиционный', 'Молодой', 'Электрический', 'Входной', 'Ничтожный', 'Выдающийся', 'Кремлевский', 'Решающий', 'Стратегический', 'Направленный', 'Украинский', 'Железный', 'Блаженный', 'Семейный', 'Олимпийский', 'Ответственный', 'Значительный', 'Нравственный', 'Милый', 'Трезвый', 'Чудовищный', 'Одинокий', 'Книжный', 'Могучий', 'Популярный', 'Связанный', 'Связанный', 'Автомобильный', 'Восточный', 'Профессиональный', 'Предметный', 'Мягкий', 'Медицинский', 'Легкий', 'Пьяный', 'Младший', 'Юный', 'Ближний', 'Практический', 'Административный', 'Ручной', 'Дурацкий', 'Прочный', 'Центральный', 'Благоприятный', 'Алый', 'Голубой', 'Научный', 'Медленный', 'Заслуженный', 'Неизменный', 'Внутренний', 'Грязный', 'Целый', 'Соседний', 'Офицерский', 'Местный', 'Ограниченный', 'Государственный', 'Организованный', 'Жилищный', 'Экологический', 'Входной', 'Фундаментальный', 'Резиновый', 'Удивительный', 'Органический', 'Деревянный', 'Лунный', 'Немыслимый', 'Тактический', 'Внешний', 'Центральный', 'Мутный', 'Дневной', 'Летний', 'Независимый', 'Нормативный', 'Солидный', 'Ранний', 'Серый', 'Удобный', 'Коммунистический', 'Роскошный', 'Исходный', 'Дорожный', 'Намерен', 'Ведущий', 'Жаркий', 'Остальной', 'Промышленный', 'Давний', 'Структурный', 'Тревожный', 'Механический', 'Вчерашний', 'Провинциальный', 'Естественный', 'Знакомый', 'Банковский', 'Огненный', 'Провинциальный', 'Кожаный', 'Совместный', 'Необыкновенный', 'Быстрый', 'Определенный', 'Бывший', 'Вечерний', 'Исполнительный', 'Тогдашний', 'Земной', 'Здоровый', 'Вынужденный', 'Окончательный', 'Принудительный', 'Особый', 'Древний', 'Дорожный', 'Духовный', 'Срочный', 'Нравственный', 'Нынешний', 'Учащийся', 'Чрезвычайный', 'Научный', 'Грустный', 'Горячий', 'Всевозможный', 'Лишенный', 'Кавказский', 'Лекарственный', 'Цветной', 'Высокий', 'Универсальный', 'Рыночный', 'Христианский', 'Русский', 'Старательный', 'Низкий', 'Отличный', 'Густой', 'Отдаленный', 'Бессмысленный', 'Иностранный', 'Финансовый', 'Успешный', 'Политический', 'Пустой', 'Хозяйственный', 'Нервный', 'Эффективный', 'Задний', 'Соответствующий', 'Фантастический', 'Холодный', 'Валютный', 'Бетонный', 'Арбитражный', 'Выдающийся', 'Указанный', 'Плоский', 'Совместный', 'Духовный', 'Розовый', 'Настоящий', 'Здоровый', 'Немой', 'Хрупкий', 'Незначительный', 'Младший', 'Глупый', 'Революционный', 'Молодежный', 'Шахматный', 'Строительный', 'Полицейский', 'Шумный', 'Жирный', 'Массовый', 'Израильский', 'Поэтический', 'Входной', 'Верхний', 'Текущий', 'Свободный', 'Замкнутый', 'Торжественный', 'Звездный', 'Покойный', 'Неясный', 'Участковый', 'Жидкий', 'Управляющий', 'Биологический', 'Петербургский', 'Незначительный', 'Почетный', 'Правый', 'Пустой', 'Эффективный', 'Честной', 'Тяжкий', 'Небольшой', 'Пестрый', 'Функциональный', 'Кривой', 'Теоретический', 'Гражданский', 'Отличный', 'Королевский', 'Виртуальный', 'Ориентированный', 'Оперативный', 'Электрический', 'Педагогический', 'Зимний', 'Новый', 'Умный', 'Благодарный', 'Правый', 'Стеклянный', 'Футбольный', 'Географический', 'Ответственный', 'Целесообразный', 'Подлинный', 'Светский', 'Скорый', 'Последний', 'Нужный', 'Аналитический', 'Глухой', 'Крупный', 'Частный', 'Качественный', 'Смертный', 'Короткий', 'Областной', 'Поверхностный', 'Густой', 'Сознательный', 'Столичный', 'Удобный', 'Вирусный', 'Крохотный', 'Уверенный', 'Колючий', 'Воинский', 'Страховой', 'Болезненный', 'Вечный', 'Телевизионный', 'Бессмысленный', 'Жуткий', 'Короткий', 'Жилой', 'Заработный', 'Непосредственный', 'Коричневый', 'Должен', 'Ориентированный', 'Цивилизованный', 'Прохладный', 'Относительный', 'Натуральный', 'Базовый', 'Решительный', 'Направленный', 'Примитивный', 'Спокойный', 'Голубой', 'Футбольный', 'Авторский', 'Подлинный', 'Драгоценный', 'Музыкальный', 'Известный', 'Всякий', 'Подозрительный', 'Террористический', 'Текущий', 'Солидный', 'Огромный', 'Турецкий', 'Розовый', 'Магнитный', 'Авиационный', 'Цветной', 'Строительный', 'Нормативный', 'Образованный', 'Духовный', 'Живой', 'Очевидный', 'Драматический', 'Нужный', 'Часовой', 'Советский', 'Казенный', 'Одинокий', 'Возрастной', 'Непривычный', 'Рыжий', 'Бесполезный', 'Колоссальный', 'Текущий', 'Поэтический', 'Повышенный', 'Книжный', 'Пространственный', 'Пограничный', 'Текущий', 'Всемирный', 'Нужный', 'Аналитический', 'Программный', 'Негативный', 'Способный', 'Роковой', 'Совершенный', 'Структурный', 'Классический', 'Тактический', 'Арбитражный', 'Мутный')


class AuthWindow(QMainWindow, LoginScreen.Ui_Auth):
    def __init__(self):
        super(AuthWindow, self).__init__()
        self.setupUi(self)
        self.login.clicked.connect(self.to_login)

    def to_login(self):
        try:
            self.user = self.loginfield.text()
            self.password = self.passwordfield.text()
            self.connection = psycopg2.connect(
                host='localhost',
                database='Sobes',
                user=self.user,
                password=self.password
            )
            self.cursor = self.connection.cursor()
            self.cursor.execute("SELECT current_user;")
            self.current_user = self.cursor.fetchone()[0]
            self.cursor.execute("SELECT rolname FROM pg_user JOIN pg_auth_members ON pg_user.usesysid = pg_auth_members.member JOIN pg_roles ON pg_roles.oid = pg_auth_members.roleid WHERE pg_user.usename = current_user;")
            self.role_group = self.cursor.fetchone()[0]
            print(f'{self.current_user} из группы {self.role_group} вошёл в систему')
            if self.role_group == 'sobes_admin':
                self.admin_menu = MainMenu(self.connection, self.cursor, self.current_user, self.role_group)
                self.admin_menu.show()
            elif self.role_group == 'accountant':
                self.cursor.execute(f"SELECT departament FROM \"accountant\" WHERE login = '{self.user}'")
                self.departament = self.cursor.fetchone()[0]
                self.publish_menu = AccountantMenu(self.connection, self.cursor, self.current_user, self.departament, self.role_group)
                self.publish_menu.show()
            elif self.role_group == 'registry':
                self.shop_menu = RegistryMenu(self.connection, self.cursor, self.current_user, self.role_group)
                self.shop_menu.show()
            else:
                self.error.setText('Неизвестная роль')
            self.close()

        except psycopg2.Error as err:
            print(err)
            self.error.setText('Проверьте ввод')


class PrintTable(QMainWindow):
    def __init__(self):
        super(PrintTable, self).__init__()

    def to_print_table(self, query):
        self.cursor.execute(query)
        self.rows = self.cursor.fetchall()
        self.tableWidget.setRowCount(len(self.rows))
        self.tableWidget.setColumnCount(len(self.labels))
        self.tableWidget.setHorizontalHeaderLabels(self.labels)
        i = 0
        for elem in self.rows:
            j = 0
            for t in elem:
                self.tableWidget.setItem(i, j, QTableWidgetItem(str(t).strip()))
                j += 1
            i += 1
        i = 0
        self.tableWidget.resizeColumnsToContents()

    def to_print_client(self):
        query = 'SELECT * FROM "Client_view"'
        self.labels = ['id', 'ФИО', 'Дата рождения', 'Тип клиента', 'Пенсия', 'Льгота']
        self.to_print_table(query)

    def to_print_client_type(self):
        query = 'SELECT * FROM "Client_type_view"'
        self.labels = ['id', 'Тип клиента']
        self.to_print_table(query)

    def to_print_dist(self):
        query = 'SELECT * FROM "District_view"'
        self.labels = ['id', 'Район']
        self.to_print_table(query)

    def to_print_exemption(self):
        query = 'SELECT * FROM "Exemption_view"'
        self.labels = ['id', 'Льгота']
        self.to_print_table(query)

    def to_print_help(self):
        query = 'SELECT * FROM "Help_view"'
        self.labels = ['Клиент', 'Адрес учреждения', 'Вид помощи', 'Денежный эквивалент', 'Дата выдачи']
        self.to_print_table(query)

    def to_print_help_type(self):
        query = 'SELECT * FROM "Help_type_view"'
        self.labels = ['id', 'Вид помощи']
        self.to_print_table(query)

    def to_print_organ(self):
        query = 'SELECT * FROM "Organ_view"'
        self.labels = ['id', 'Район', 'Год открытия', 'Количество сотрудников', 'Адрес', 'Номер телефона']
        self.to_print_table(query)

    def to_print_acc(self):
        query = 'SELECT id, login, departament FROM "accountant" ORDER BY id'
        self.labels = ['id', 'Логин', 'Учреждение']
        self.to_print_table(query)


class MainMenu(PrintTable, main_window.Ui_MainWindow):
    def __init__(self, connection, cursor, current_user, role_group):
        super(MainMenu, self).__init__()
        self.setupUi(self)
        self.setFixedSize(1020, 720)
        self.client.clicked.connect(self.to_print_client)
        self.client_type.clicked.connect(self.to_print_client_type)
        self.dist.clicked.connect(self.to_print_dist)
        self.exemption.clicked.connect(self.to_print_exemption)
        self.help.clicked.connect(self.to_print_help)
        self.help_type.clicked.connect(self.to_print_help_type)
        self.organ.clicked.connect(self.to_print_organ)
        self.Change_button.clicked.connect(self.to_add)
        self.Delete_button.clicked.connect(self.to_delete)
        self.Workers_button.clicked.connect(self.to_add_worker)
        self.Queries_button.clicked.connect(self.queries)
        self.connection = connection
        self.cursor = cursor
        self.current_user = current_user
        self.role_group = role_group

    def to_add(self):
        self.add = Add(self.connection, self.cursor, self.role_group)
        self.add.show()

    def to_delete(self):
        self.delete = Delete(self.connection, self.cursor, self.role_group)
        self.delete.show()

    def to_add_worker(self):
        self.worker = AddWorker(self.connection, self.cursor, self.current_user, self.role_group)
        self.worker.show()

    def queries(self):
        self.q = Queries(self.connection, self.cursor)
        self.q.show()


class Add(QMainWindow, Add.Ui_Dialog):
    def __init__(self, connection, cursor, role_group):
        super(Add, self).__init__()
        self.setupUi(self)
        self.role_group = role_group
        self.connection = connection
        self.cursor = cursor
        if role_group == 'sobes_admin':
            self.table.addItem('Район')
            self.table.addItem('Льготы')
            self.table.addItem('Вид помощи')
            self.table.addItem('Тип клиента')
        self.OKbutton.clicked.connect(self.to_add)

    def to_add(self):
        if self.table.currentText() == 'Район':
            self.table_name = '"District"'
        elif self.table.currentText() == 'Льготы':
            self.table_name = '"Exemption"'
        elif self.table.currentText() == 'Вид помощи':
            self.table_name = '"Help_type"'
        elif self.table.currentText() == 'Тип клиента':
            self.table_name = '"Client_type"'
        try:
            self.name = self.id.text()
            query = f'SELECT id FROM {self.table_name} ORDER BY id DESC LIMIT 1'
            self.cursor.execute(query)
            self.name_id = self.cursor.fetchone()
            if not self.name_id:
                self.name_id = [0]
            query = f"INSERT INTO {self.table_name} VALUES({int(self.name_id[0]) + 1}, '{self.name}')"
            self.cursor.execute(query)
            self.connection.commit()
            self.error.setText('Успешно добавлено')
        except Exception as err:
            print(err)
            self.error.setText('Ошибка!')


class DeleteMess(QMainWindow, DeleteMessage.Ui_Dialog):
    def __init__(self, connection, cursor, table, id):
        super(DeleteMess, self).__init__()
        self.setupUi(self)
        self.setFixedSize(560, 150)
        self.connection = connection
        self.cursor = cursor
        self.table = table
        self.id = id
        query = f'SELECT * FROM {self.table} WHERE id = {self.id}'
        self.cursor.execute(query)
        self.text.setText(f'Вы действительно хотите удалить {self.cursor.fetchall()}')
        self.OKbutton.clicked.connect(self.delete)
        self.CancelButton.clicked.connect(self.cancel)

    def delete(self):
        try:
            query = f'DELETE FROM {self.table} WHERE id = {self.id}'
            self.cursor.execute(query)
            self.connection.commit()
            self.error.setText('Удалено!')
        except Exception as err:
            print(err)
            self.error.setText('Ошибка!')

    def cancel(self):
        self.close()


class Delete(QMainWindow, delete.Ui_Dialog):
    def __init__(self, connection, cursor, role_group):
        super(Delete, self).__init__()
        self.setupUi(self)
        self.role_group = role_group
        self.connection = connection
        self.cursor = cursor
        if role_group == 'sobes_admin':
            self.table.addItem('Район')
            self.table.addItem('Льготы')
            self.table.addItem('Вид помощи')
            self.table.addItem('Тип клиента')
            self.table.addItem('Бухгалтер')
            self.table.addItem('Регистратура')
        elif role_group == 'accountant':
            self.table.addItem('Выданная помощь')
        elif role_group == 'registry':
            self.table.addItem('Клиенты')
        self.OKbutton.clicked.connect(self.to_delete)

    def to_delete(self):
        if self.table.currentText() == 'Район':
            self.table_name = '"District"'
        elif self.table.currentText() == 'Льготы':
            self.table_name = '"Exemption"'
        elif self.table.currentText() == 'Вид помощи':
            self.table_name = '"Help_type"'
        elif self.table.currentText() == 'Тип клиента':
            self.table_name = '"Client_type"'
        elif self.table.currentText() == 'Бухгалтер':
            self.table_name = '"accountant"'
        elif self.table.currentText() == 'Регистратура':
            self.table_name = '"registry"'
        elif self.table.currentText() == 'Выданная помощь':
            self.table_name = '"Help"'
        elif self.table.currentText() == 'Клиенты':
            self.table_name = '"Client"'
        id = self.id.text()
        self.message = DeleteMess(self.connection, self.cursor, self.table_name, id)
        self.message.show()


class AddWorker(PrintTable, worker.Ui_Dialog):
    def __init__(self, connection, cursor, current_user, role_group):
        super(AddWorker, self).__init__()
        self.setupUi(self)
        self.setFixedSize(550, 580)
        self.connection = connection
        self.cursor = cursor
        self.current_user = current_user
        self.role_group = role_group
        self.update_reg.clicked.connect(self.to_print_reg)
        self.update_acc.clicked.connect(self.to_print_acc)
        self.add_acc.clicked.connect(self.to_add)
        self.add_reg.clicked.connect(self.to_add)
        self.delete_reg.clicked.connect(self.to_delete)
        self.delete_acc.clicked.connect(self.to_delete)

    def to_delete(self):
        self.delete = Delete(self.connection, self.cursor, self.role_group)
        self.delete.show()

    def to_add(self):
        self.add = AddEmployees(self.connection, self.cursor)
        self.add.show()

    def to_print_reg(self):
        query = 'SELECT id, login FROM "registry" ORDER BY id'
        self.labels = ['id', 'Логин']
        self.cursor.execute(query)
        self.rows = self.cursor.fetchall()
        self.tableWidget_2.setRowCount(len(self.rows))
        self.tableWidget_2.setColumnCount(len(self.labels))
        self.tableWidget_2.setHorizontalHeaderLabels(self.labels)
        i = 0
        for elem in self.rows:
            j = 0
            for t in elem:
                self.tableWidget_2.setItem(i, j, QTableWidgetItem(str(t).strip()))
                j += 1
            i += 1
        i = 0
        self.tableWidget_2.resizeColumnsToContents()


class AddEmployees(QMainWindow, add_worker.Ui_Dialog):
    def __init__(self, connection, cursor):
        super(AddEmployees, self).__init__()
        self.setupUi(self)
        self.connection = connection
        self.cursor = cursor
        self.table.addItem('Бухгалтер')
        self.table.addItem('Регистратура')
        self.table_name = 'accountant'
        self.table.currentTextChanged.connect(self.handle_table_change)  # Подключение сигнала
        self.add_button.clicked.connect(self.to_add)

    def handle_table_change(self):
        if self.table.currentText() == 'Бухгалтер':
            self.table_name = 'accountant'
            self.dep.show()
            self.label_6.show()
        if self.table.currentText() == 'Регистратура':
            self.table_name = 'registry'
            self.dep.hide()
            self.label_6.hide()

    def to_add(self):
        self.query = f'SELECT id FROM {self.table_name} ORDER BY id DESC'
        self.cursor.execute(self.query)
        self.id = self.cursor.fetchall()
        if not self.id:
            self.id = [0]
        if self.table_name == 'accountant':
            self.query = f"INSERT INTO {self.table_name} VALUES ({self.id[0]+1}, '{self.log.text()}', {self.dep.text()})"
        else:
            self.query = f"INSERT INTO {self.table_name} VALUES ({self.id[0] + 1}, '{self.log.text()}')"
        try:
            self.cursor.execute(self.query)
            self.connection.commit()
            self.error.setText('Успешно добавлено')
        except Exception as err:
            print(err)
            self.error.setText('Ошибка!')


class AccountantMenu(PrintTable, accountant.Ui_Dialog):
    def __init__(self, connection, cursor, current_user, departament, role_group):
        super(AccountantMenu, self).__init__()
        self.setupUi(self)
        self.connection = connection
        self.cursor = cursor
        self.current_user = current_user
        self.departament = departament
        self.role_group = role_group
        self.auth_as.setText(f'Вы вошли как: {current_user}, учреждение № {self.departament}')
        self.Update_btn.clicked.connect(self.to_print_help)
        self.Add_btn.clicked.connect(self.to_add_help)
        self.Delete_btn.clicked.connect(self.to_delete)

    def to_delete(self):
        self.delete = Delete(self.connection, self.cursor, self.role_group)
        self.delete.show()

    def to_add_help(self):
        self.add = AddHelp(self.connection, self.cursor, self.departament)
        self.add.show()


class RegistryMenu(PrintTable, registry.Ui_Dialog):
    def __init__(self, connection, cursor, current_user, role_group):
        super(RegistryMenu, self).__init__()
        self.setupUi(self)
        self.connection = connection
        self.cursor = cursor
        self.current_user = current_user
        self.role_group = role_group
        self.auth_as.setText(f'Вы вошли как: {current_user}')
        self.Update_btn.clicked.connect(self.to_print_client)
        self.Add_btn.clicked.connect(self.to_add_client)
        self.Delete_btn.clicked.connect(self.to_delete)

    def to_delete(self):
        self.delete = Delete(self.connection, self.cursor, self.role_group)
        self.delete.show()

    def to_add_client(self):
        self.add = AddClient(self.connection, self.cursor)
        self.add.show()


class AddHelp(QMainWindow, add_help.Ui_Dialog):
    def __init__(self, connection, cursor, departament):
        super(AddHelp, self).__init__()
        self.setupUi(self)
        self.connection = connection
        self.cursor = cursor
        self.departament = departament
        query = 'SELECT id, name FROM "Client"'
        self.cursor.execute(query)
        for t in self.cursor.fetchall():
            self.client.addItem(str(t))
        query = 'SELECT id, name FROM "Help_type"'
        self.cursor.execute(query)
        for t in self.cursor.fetchall():
            self.help_type.addItem(str(t))
        self.Add.clicked.connect(self.correct_data)

    def correct_data(self):
        money = self.money.text()
        client = self.client.currentText().replace('(', '').replace(')', '').replace(' \'', '\'').split(',')
        help_type = self.help_type.currentText().replace('(', '').replace(')', '').replace(' \'', '\'').split(',')
        client_id = str(client[0])
        help_type_id = str(help_type[0])
        if int(money) > 0:
            try:
                query = f"INSERT INTO \"Help\" VALUES({client_id}, {self.departament}, {help_type_id}, {money}, '{datetime.date.today()}')"
                self.cursor.execute(query)
                self.connection.commit()
                self.error.setText('Успешно добавлено')
            except Exception as err:
                print(err)
                self.error.setText('Что-то пошло не так :(')
        else:
            self.error.setText('Проверьте корректность заполнения полей!')


class AddClient(QMainWindow, add_client.Ui_Dialog):
    def __init__(self, connection, cursor):
        super(AddClient, self).__init__()
        self.setupUi(self)
        self.connection = connection
        self.cursor = cursor
        query = 'SELECT id, name FROM "Client_type"'
        self.cursor.execute(query)
        for t in self.cursor.fetchall():
            self.client_type.addItem(str(t))
        query = 'SELECT id, name FROM "Exemption"'
        self.cursor.execute(query)
        for t in self.cursor.fetchall():
            self.exemption.addItem(str(t))
        self.Add.clicked.connect(self.correct_data)

    def correct_data(self):
        name = self.name.text()
        birth_date = self.birth.text()
        client_type = self.client_type.currentText().replace('(', '').replace(')', '').replace(' \'', '\'').split(',')
        exemption = self.exemption.currentText().replace('(', '').replace(')', '').replace(' \'', '\'').split(',')
        client_type_id = str(client_type[0])
        exemption_id = str(exemption[0])
        pension = self.pension.text()
        if int(pension) > 0:
            try:
                query = f'SELECT id FROM "Client" ORDER BY id DESC LIMIT 1'
                self.cursor.execute(query)
                self.name_id = self.cursor.fetchone()
                if not self.name_id:
                    self.name_id = [0]
                query = f"INSERT INTO \"Client\" VALUES({int(self.name_id[0])+1}, '{name}', '{birth_date}', {client_type_id}, {pension}, {exemption_id})"
                self.cursor.execute(query)
                self.connection.commit()
                self.error.setText('Успешно добавлено')
            except Exception as err:
                print(err)
                self.error.setText('Что-то пошло не так :(')
        else:
            self.error.setText('Проверьте корректность заполнения полей!')


class Queries(QMainWindow, queries.Ui_Dialog):
    def __init__(self, connection, cursor):
        super(Queries, self).__init__()
        self.setupUi(self)
        self.connection = connection
        self.cursor = cursor
        self.queries.currentTextChanged.connect(self.handle_queries_change)  # Подключение сигнала
        self.queries.addItem('Адрес, телефон, учреждения заданного района. Симметричное внутреннее соединение с условием отбора по внешнему ключу')
        self.queries.addItem('ФИО, дата рождения клиента с выбранной льготой. Симметричное внутреннее соединение с условием отбора по внешнему ключу')
        self.queries.addItem('Клиент, адрес учреждения, вид помощи, денежный эквивалент помощи, выданной в указанную дату. Симметричное внутреннее соединение с условием отбора по датам')
        self.queries.addItem('Адрес, телефон, год открытия, район учреждения, открытого в заданный год. Симметричное внутреннее соединение с условием отбора по датам')
        self.queries.addItem('Адрес, телефон, год открытия, район учреждения. Симметричное внутреннее соединение без условия')
        self.queries.addItem('Клиент и его тип. Симметричное внутреннее соединение без условия')
        self.queries.addItem('Клиент и его льгота. Симметричное внутреннее соединение без условия')
        self.queries.addItem('ФИО, дата рождения по заданному типу клиента. Левое внешнее соединение')
        self.queries.addItem('ФИО, дата рождения по заданному типу клиента. Правое внешнее соединение')
        self.queries.addItem('ID клиента, ФИО, дата рождения, тип по заданному имени. Запрос на запросе по принципу левого соединения')
        self.queries.addItem('Учреждение и количество оказанной помощи. Итоговый запрос без условия')
        self.queries.addItem('Учреждения в заданном промежутке и количество оказанной помощи. Итоговый запрос с условием на данные')
        self.queries.addItem('Учреждения с количеством оказанной помощи больше заданного. Итоговый запрос с условием на группы')
        self.queries.addItem('Учреждения в заданном промежутке и с количеством оказанной помощи больше заданного. Итоговый запрос с условием на данные и на группы')
        self.queries.addItem('Учреждения с количеством оказанной помощи. Запрос на запросе по принципу итогового запроса')
        self.queries.addItem('Учреждения с количеством оказанной помощи. Запрос с подзапросом')

    def handle_queries_change(self):
        if self.queries.currentText() == 'Адрес, телефон, учреждения заданного района. Симметричное внутреннее соединение с условием отбора по внешнему ключу':
            self.hide_all()
            self.label_combo.show()
            self.label_combo.setText('Выберите район')
            self.comboBox.show()
            query = 'SELECT id, name FROM "District"'
            self.cursor.execute(query)
            for t in self.cursor.fetchall():
                self.comboBox.addItem(str(t))
            district = self.comboBox.currentText().replace('(', '').replace(')', '').replace(' \'', '\'').split(',')
            district_id = str(district[0])
            self.labels = ['Адрес', 'Телефон', 'Район']
            self.query = f'SELECT * FROM q1({district_id})'
            self.comboBox.currentTextChanged.connect(self.q1)
        elif self.queries.currentText() == 'ФИО, дата рождения клиента с выбранной льготой. Симметричное внутреннее соединение с условием отбора по внешнему ключу':
            self.hide_all()
            self.hide_all()
            self.label_combo.show()
            self.comboBox.show()
            self.label_combo.setText('Выберите льготу')
            self.comboBox.show()
            query = 'SELECT id, name FROM "Exemption"'
            self.cursor.execute(query)
            for t in self.cursor.fetchall():
                self.comboBox.addItem(str(t))
            exemption = self.comboBox.currentText().replace('(', '').replace(')', '').replace(' \'', '\'').split(',')
            exemption_id = str(exemption[0])
            self.labels = ['ФИО', 'Дата рождения', 'Льгота']
            self.query = f'SELECT * FROM q2({exemption_id})'
            self.comboBox.currentTextChanged.connect(self.q2)
        elif self.queries.currentText() == 'Клиент, адрес учреждения, вид помощи, денежный эквивалент помощи, выданной в указанную дату. Симметричное внутреннее соединение с условием отбора по датам':
            self.hide_all()
            self.dateEdit.show()
            self.label_date.show()
            self.label_date.setText('Введите дату')
            self.dateEdit.dateChanged.connect(self.q3)  # Подключение сигнала
        elif self.queries.currentText() == 'Адрес, телефон, год открытия, район учреждения, открытого в заданный год. Симметричное внутреннее соединение с условием отбора по датам':
            self.hide_all()
            self.hide_all()
            self.label_text.show()
            self.textEdit.show()
            self.textEdit.setText('')
            self.label_text.setText('Выберите год')
            self.textEdit.textChanged.connect(self.q4)
        elif self.queries.currentText() == 'Адрес, телефон, год открытия, район учреждения. Симметричное внутреннее соединение без условия':
            self.hide_all()
            self.labels = ['Адрес', 'Телефон', 'Год открытия', 'Район']
            self.query = 'SELECT * FROM q5()'
        elif self.queries.currentText() == 'Клиент и его тип. Симметричное внутреннее соединение без условия':
            self.hide_all()
            self.labels = ['ФИО', 'Тип клиента']
            self.query = 'SELECT * FROM q6()'
        elif self.queries.currentText() == 'Клиент и его льгота. Симметричное внутреннее соединение без условия':
            self.hide_all()
            self.labels = ['ФИО', 'Льгота']
            self.query = f'SELECT * FROM q7()'
        elif self.queries.currentText() == 'ФИО, дата рождения по заданному типу клиента. Левое внешнее соединение':
            self.hide_all()
            self.labels = ['ФИО', 'Дата рождения', 'Тип клиента']
            self.query = f'SELECT * FROM q8()'
        elif self.queries.currentText() == 'ФИО, дата рождения по заданному типу клиента. Правое внешнее соединение':
            self.hide_all()
            self.labels = ['ФИО', 'Дата рождения', 'Тип клиента']
            self.query = f'SELECT * FROM q9()'
        elif self.queries.currentText() == 'ID клиента, ФИО, дата рождения, тип по заданному имени. Запрос на запросе по принципу левого соединения':
            self.hide_all()
            self.textEdit.setText('')
            self.label_text.show()
            self.textEdit.show()
            self.label_text.setText('Выберите имя')
            self.textEdit.textChanged.connect(self.q10)
        elif self.queries.currentText() == 'Учреждение и количество оказанной помощи. Итоговый запрос без условия':
            self.hide_all()
            self.labels = ['Учреждение', 'Количество оказанной помощи']
            self.query = f'SELECT * FROM q11()'
        elif self.queries.currentText() == 'Учреждения в заданном промежутке и с количеством оказанной помощи больше заданного. Итоговый запрос с условием на данные':
            self.hide_all()
            self.label_text.show()
            self.textEdit.show()
            self.label_text_2.show()
            self.textEdit_2.show()
            self.textEdit.setText('')
            self.textEdit_2.setText('')
            self.label_text.setText('Выберите начальный ID учреждения')
            self.label_text_2.setText('Выберите конечный ID учреждения')
            self.textEdit.textChanged.connect(self.q12)
            self.textEdit_2.textChanged.connect(self.q12)
            self.excel_btn.show()
            self.graph_btn.show()
        elif self.queries.currentText() == 'Учреждения с количеством оказанной помощи больше заданного. Итоговый запрос с условием на группы':
            self.hide_all()
            self.label_text.show()
            self.textEdit.show()
            self.label_text.setText('Выберите количество оказанной помощи')
            self.textEdit.textChanged.connect(self.q13)
            self.excel_btn.show()
            self.graph_btn.show()
        elif self.queries.currentText() == 'Учреждения в заданном промежутке и с количеством оказанной помощи больше заданного. Итоговый запрос с условием на данные и на группы':
            self.hide_all()
            self.label_text.show()
            self.textEdit.show()
            self.label_text_2.show()
            self.textEdit_2.show()
            self.label_text_3.show()
            self.textEdit_3.show()
            self.textEdit.setText('')
            self.textEdit_2.setText('')
            self.label_text.setText('Выберите начальный ID учреждения')
            self.label_text_2.setText('Выберите конечный ID учреждения')
            self.label_text_3.setText('Выберите количество оказанной помощи')
            self.textEdit.textChanged.connect(self.q14)
            self.textEdit_2.textChanged.connect(self.q14)
            self.textEdit_3.textChanged.connect(self.q14)
            self.excel_btn.show()
            self.graph_btn.show()
        elif self.queries.currentText() == 'Учреждения с количеством оказанной помощи. Запрос на запросе по принципу итогового запроса':
            self.hide_all()
            self.label_text.show()
            self.textEdit.show()
            self.label_text.setText('Выберите количество книг')
            self.textEdit.textChanged.connect(self.q15)
            self.excel_btn.show()
            self.graph_btn.show()
        elif self.queries.currentText() == 'Учреждения с количеством оказанной помощи. Запрос с подзапросом':
            self.hide_all()
            self.label_combo.show()
            self.comboBox.show()
            self.label_combo.setText('Выберите район')
            self.comboBox.show()
            query = 'SELECT id, name FROM "District"'
            self.cursor.execute(query)
            for t in self.cursor.fetchall():
                self.comboBox.addItem(str(t))
            city = self.comboBox.currentText().replace('(', '').replace(')', '').replace(' \'', '\'').split(',')
            city_id = str(city[0])
            self.labels = ['ID учреждения', 'Количество оказанной помощи']
            self.query = f'SELECT * FROM q16({city_id})'
            self.comboBox.currentTextChanged.connect(self.q16)
        self.print.clicked.connect(self.to_print)
        self.graph_btn.clicked.connect(self.create_chart)
        self.excel_btn.clicked.connect(self.export_to_excel)

    def hide_all(self):
        self.label_text.hide()
        self.textEdit.hide()
        self.label_combo.hide()
        self.comboBox.hide()
        self.label_text_2.hide()
        self.comboBox.clear()
        self.textEdit_2.hide()
        self.textEdit.clear()
        self.textEdit_2.clear()
        self.textEdit_3.clear()
        self.label_text_3.hide()
        self.textEdit_3.hide()
        self.dateEdit.hide()
        self.label_date.hide()
        self.graph_btn.hide()
        self.excel_btn.hide()

    def q1(self):
        district = self.comboBox.currentText().replace('(', '').replace(')', '').replace(' \'', '\'').split(',')
        district_id = str(district[0])
        self.labels = ['Адрес', 'Телефон', 'Район']
        self.query = f'SELECT * FROM q1({district_id})'

    def q2(self):
        exemption = self.comboBox.currentText().replace('(', '').replace(')', '').replace(' \'', '\'').split(',')
        exemption_id = str(exemption[0])
        self.labels = ['ФИО', 'Дата рождения', 'Льгота']
        self.query = f'SELECT * FROM q2({exemption_id})'

    def q3(self):
        date = self.dateEdit.text()
        self.labels = ['ФИО', 'Адрес', 'Тип клиента', 'Пенсия']
        self.query = f"SELECT * FROM q3('{date}')"

    def q4(self):
        year = self.textEdit.text()
        self.labels = ['Адрес', 'Телефон', 'Год открытия', 'Район']
        self.query = f'SELECT * FROM q4({year})'

    def q10(self):
        name = self.textEdit.text()
        self.labels = ['id клиента', 'ФИО', 'Дата рождения', 'Тип клиента']
        self.query = f"SELECT * FROM q10('{name}')"

    def q12(self):
        organ1 = self.textEdit.text()
        organ2 = self.textEdit_2.text()
        self.labels = ['ID учреждения', 'Количество оказанной помощи']
        self.query = f'SELECT * FROM q12({organ1}, {organ2})'

    def q13(self):
        book_count = self.textEdit.text()
        self.labels = ['ID учреждения', 'Количество оказанной помощи']
        self.query = f'SELECT * FROM q13({book_count})'

    def q14(self):
        organ1 = self.textEdit.text()
        organ2 = self.textEdit_2.text()
        helps = self.textEdit_3.text()
        self.labels = ['ID учреждения', 'Количество оказанной помощи']
        self.query = f'SELECT * FROM q14({organ1}, {organ2}, {helps})'

    def q15(self):
        helps = self.textEdit.text()
        self.labels = ['ID учреждения', 'Количество оказанной помощи']
        self.query = f'SELECT * FROM q15({helps})'

    def q16(self):
        query = 'SELECT id, name FROM "District"'
        self.cursor.execute(query)
        for t in self.cursor.fetchall():
            self.comboBox.addItem(str(t))
        dist = self.comboBox.currentText().replace('(', '').replace(')', '').replace(' \'', '\'').split(',')
        dist_id = str(dist[0])
        self.query = f'SELECT * FROM q16({dist_id})'

    def create_chart(self):
        self.label = self.queries.currentText()
        self.chart = Chart(self.connection, self.cursor, self.query, self.label)
        self.chart.show()

    def to_print(self):
        try:
            self.cursor.execute(self.query)
            self.rows = self.cursor.fetchall()
            self.tableWidget.setRowCount(len(self.rows))
            self.tableWidget.setColumnCount(len(self.labels))
            self.tableWidget.setHorizontalHeaderLabels(self.labels)
            i = 0
            for elem in self.rows:
                j = 0
                for t in elem:
                    self.tableWidget.setItem(i, j, QTableWidgetItem(str(t).strip()))
                    j += 1
                i += 1
            i = 0
            self.tableWidget.resizeColumnsToContents()
        except psycopg2.Error as err:
            print(err)
            self.error.setText('Проверьте ввод!')

    def export_to_excel(self):
        self.label = self.queries.currentText().split('. ')
        self.cursor = self.connection.cursor()
        book = openpyxl.Workbook()
        sheet = book.active
        self.cursor.execute(self.query)
        results = self.cursor.fetchall()
        i = 0
        for row in results:
            i += 1
            j = 1
            for col in row:
                cell = sheet.cell(row=i, column=j)
                cell.value = col
                j += 1
        try:
            book.save(f"{self.label[1]}.xlsx")
            self.error.setText('Успешно!')
        except Exception as err:
            print(err)
            self.error.setText('Ошибка!')


class Chart(QMainWindow, graphics.Ui_Dialog):
    def __init__(self, connection, cursor, query, label):
        super(Chart, self).__init__()
        self.setupUi(self)
        self.connection = connection
        self.cursor = cursor
        self.query = query
        self.label = label.split('. ')
        self.cursor.execute(self.query)
        self.graphics_name.setText(self.label[1])
        data = self.cursor.fetchall()
        categories = [str(row[0]) for row in data]
        values = [row[1] for row in data]
        series = QBarSeries()
        bar_set = QBarSet("Оказано помощи")
        for value in values:
            bar_set.append(value)
        bar_set.setColor(QColor('green'))
        series.append(bar_set)
        chart = QChart()
        chart.addSeries(series)
        axis_x = QBarCategoryAxis()
        axis_x.append(categories)
        chart.addAxis(axis_x, Qt.AlignBottom)
        series.attachAxis(axis_x)
        axis_y = QValueAxis()
        chart.addAxis(axis_y, Qt.AlignLeft)
        series.attachAxis(axis_y)
        chart_view = QChartView(chart)
        chart_view.setRenderHint(QPainter.Antialiasing)
        scene = QGraphicsScene()
        scene.addItem(chart)
        chart.setMinimumSize(500, 500)
        scene.setSceneRect(chart.rect())
        self.graphicsView.setScene(scene)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = AuthWindow()

    window.show()
    sys.exit(app.exec_())
